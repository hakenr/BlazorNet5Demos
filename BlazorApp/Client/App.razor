@using System.Reflection
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.WebAssembly.Services
@inject LazyAssemblyLoader LazyAssemblyLoader

<Router AppAssembly="@typeof(Program).Assembly" AdditionalAssemblies="lazyLoadedAssemblies" OnNavigateAsync="@OnNavigateAsync">
	<Found Context="routeData">
		<RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
	</Found>
	<NotFound>
		<LayoutView Layout="@typeof(MainLayout)">
			<p>Sorry, there's nothing at this address.</p>
		</LayoutView>
	</NotFound>
</Router>

@code {
	private List<Assembly> lazyLoadedAssemblies = new List<Assembly>();

	private async Task OnNavigateAsync(NavigationContext args)
	{
		if (args.Path.Contains("lazy1/")
			&& !lazyLoadedAssemblies.Any(a => a.FullName != "BlazorApp.Client.LazyPages1.dll"))
		{
			Console.WriteLine("Loading BlazorApp.Client.LazyPages1.dll");
			var assemblies = await LazyAssemblyLoader.LoadAssembliesAsync(new string[] { "BlazorApp.Client.LazyPages1.dll" });
			lazyLoadedAssemblies.AddRange(assemblies);
		}

		if (args.Path.Contains("lazy2/")
			&& !lazyLoadedAssemblies.Any(a => a.FullName != "BlazorApp.Client.LazyPages2.dll"))
		{
			Console.WriteLine("Loading BlazorApp.Client.LazyPages2.dll");
			var assemblies = await LazyAssemblyLoader.LoadAssembliesAsync(new string[] { "BlazorApp.Client.LazyPages2.dll" });
			lazyLoadedAssemblies.AddRange(assemblies);
		}
	}
}